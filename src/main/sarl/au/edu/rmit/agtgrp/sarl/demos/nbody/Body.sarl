package au.edu.rmit.agtgrp.sarl.demos.nbody

import com.google.common.collect.EvictingQueue

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules

import javax.swing.SwingUtilities
import io.sarl.core.InnerContextAccess
import io.sarl.lang.core.AgentContext

import static au.edu.rmit.agtgrp.sarl.demos.nbody.Constants.*

agent Body {
	uses DefaultContextInteractions
	uses Logging
	uses Lifecycle

	var ry : double // holds the cartesian positions
	var rx : double
	var vx : double = 0 // velocity components
	var vy : double = 0
	var fx : double = 0.0 // force components
	var fy : double = 0.0

	var mass : double

	on Initialize {
		this.rx = Math.random * CANVAS_SIZE
		this.ry = Math.random * CANVAS_SIZE
		this.mass = 0.01 		// Math.random() //* SOLAR_MASS * 10 + 1e20
	}

	on BodyInfo [!occurrence.fromMe] {
		occurrence.addForce
	}

	on Tick {
		updatePosstion(occurrence.dt) // was written before as: occurrence.dt.updatePosstion
		inform_position
		resetForce
	}

	def inform_position {
		influence.emit
		// info("Body at " + rx + " , " + ry + " - V " + vx + " , " + vy + " - F " + fx + " , " + fy)
	}

	def influence : BodyInfo {
		new BodyInfo(this.rx, this.ry, this.mass)
	}

	def resetForce() {
		this.fx = 0.0;
		this.fy = 0.0;
	}

	// update the velocity and position using a timestep dt
	def updatePosstion(dt : double = 1.0) {
		this.vx += dt * this.fx / mass;
		this.vy += dt * this.fy / mass;
		this.rx += dt * this.vx;
		this.ry += dt * this.vy;
	}

	// compute the net force acting between the body a and b, and
	// add to the net force acting on a
	def addForce(b : BodyInfo) {
		var EPS = 3E4; // softening parameter (just to avoid infinities)
		var dx = b.rx - this.rx;
		var dy = b.ry - this.ry;
		var dist = Math.sqrt(dx * dx + dy * dy);
		var F = (G * this.mass * b.mass) / (dist * dist + EPS * EPS);
		this.fx = this.fx + F * dx / dist;
		this.fy = this.fy + F * dy / dist;
	}

}