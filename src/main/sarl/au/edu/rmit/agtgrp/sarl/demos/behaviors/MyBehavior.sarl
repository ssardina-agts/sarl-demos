package au.edu.rmit.agtgrp.sarl.demos.behaviors

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import io.sarl.core.Behaviors
import io.sarl.lang.core.Agent
import au.edu.rmit.agtgrp.sarl.demos.ConsoleReporting
import au.edu.rmit.agtgrp.sarl.demos.Reporting

behavior MyBehavior {
	uses Logging
	//	uses Reporting	// not needed because the behavior itself does not uses,just set the skill
		
	var initParam : Object[]

	new (owner : Agent, initParam : Object*) {
		super(owner)
		this.initParam = initParam
	}

	on Initialize {
		info("===============> I'm initializing my BEHAVIOR")
		
		// This will always give empty: not sure how you can pass data to this Initialization event!
		info("This is the data in occurrence.parameters: {0}" + occurrence.parameters.toString)
		
		info("This is the data stored at creation time: {0}", this.initParam.toString)

		setSkill(new ConsoleReporting("Super-Single-Agent"), Reporting)

	}
}


/** 
 * @author ssardina
 * 
 */
agent MyAgent {
	uses Logging
	uses Lifecycle
	uses Behaviors
	uses Reporting

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("----------------------> The AGENT was started.")



		/**
		 * 1 - Here we want to create a behavior and pass it some data
		 * We needed to create a new(..,..) constructor in the behavior to access this new data
		 * the occurrence.parameters of Initialize will not get it
		 * 
		 * Check forum post: https://groups.google.com/forum/#!topic/sarl/E0TuX-V123U 
		 * 
		 */
		val beh = new MyBehavior(this, "Hello behavior, this is my data!") // <- the parameter is the agent
        registerBehavior(beh)

		agent_says("I now have the skill to report on console")


        
		// Bye bye...
		killMe
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
