package au.edu.rmit.agtgrp.sarl.demos.pingpong
/**
 * Ping Pong Demo from SARL tutorial: http://www.sarl.io/docs/official/tutorials/PingPong.html
 */
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import io.sarl.core.Logging

event Ping {
	val index : int
	new(i : int){
		this.index = i
	}
}

event Pong {
	val index : int
	new(i : int){
		this.index = i
	}
}

agent PongAgent {
	uses DefaultContextInteractions
	uses Logging

	on Ping {
		info("-----> Pong {0}", occurrence.index)
		emit(new Pong(occurrence.index))[it == occurrence.source]
	}
}

agent PingAgent {
	uses DefaultContextInteractions, Schedules
	uses Logging

	on Pong {
		info("Ping {0}", occurrence.index + 1)
		emit(new Ping(occurrence.index + 1))[it == occurrence.source]
	}

	on Initialize {
		val task = task("waiting_for_partner")
		task.every(1000) [
			if (defaultSpace.participants.size > 1) {
				emit(new Ping(0))
				task.cancel
			}
		]
	}
}
